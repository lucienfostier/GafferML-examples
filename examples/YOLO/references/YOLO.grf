import Gaffer
import GafferImage
import GafferML
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 5, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["ImageToTensor10"] = GafferML.ImageToTensor( "ImageToTensor10" )
parent.addChild( __children["ImageToTensor10"] )
__children["ImageToTensor10"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ColorSpace11"] = GafferImage.ColorSpace( "ColorSpace11" )
parent.addChild( __children["ColorSpace11"] )
__children["ColorSpace11"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize21"] = GafferImage.Resize( "Resize21" )
parent.addChild( __children["Resize21"] )
__children["Resize21"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Inference16"] = GafferML.Inference( "Inference16" )
parent.addChild( __children["Inference16"] )
__children["Inference16"]["in"].resize( 1 )
__children["Inference16"]["out"].resize( 1 )
__children["Inference16"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"] = Gaffer.Box( "BoxOverlay" )
parent.addChild( __children["BoxOverlay"] )
__children["BoxOverlay"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["BoxOverlay"]["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxOverlay"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.ImagePlug( "img", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["BoxOverlay"]["BoxIn1"].setup( GafferML.TensorPlug( "out", defaultValue = GafferML.Tensor(), ) )
__children["BoxOverlay"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferML.TensorPlug( "tensor", defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["BoxOverlay"]["BoxIn2"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxOverlay"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.ImagePlug( "bg", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.Rectangle( "Rectangle" ) )
__children["BoxOverlay"]["Rectangle"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Loop( "Loop" ) )
__children["BoxOverlay"]["Loop"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOverlay"]["Loop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.Merge( "Merge" ) )
__children["BoxOverlay"]["Merge"]["in"].resize( 3 )
__children["BoxOverlay"]["Merge"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Expression( "Expression6" ) )
__children["BoxOverlay"]["Expression6"]["__in"].addChild( GafferML.TensorPlug( "p0", defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression6"]["__out"].addChild( Gaffer.IntPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 10, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression6"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Expression( "Expression7" ) )
__children["BoxOverlay"]["Expression7"]["__in"].addChild( Gaffer.Color3fPlug( "p0", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression7"]["__in"].addChild( GafferImage.AtomicFormatPlug( "p1", defaultValue = GafferImage.Format(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression7"]["__in"].addChild( GafferImage.AtomicFormatPlug( "p2", defaultValue = GafferImage.Format(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression7"]["__in"].addChild( GafferML.TensorPlug( "p3", defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression7"]["__out"].addChild( Gaffer.Box2fPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 100, 100 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression7"]["__out"].addChild( Gaffer.Color4fPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression7"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.Merge( "Merge1" ) )
__children["BoxOverlay"]["Merge1"]["in"].resize( 3 )
__children["BoxOverlay"]["Merge1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.DeleteChannels( "DeleteChannels" ) )
__children["BoxOverlay"]["DeleteChannels"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["BoxOverlay"]["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOverlay"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.Text( "Text" ) )
__children["BoxOverlay"]["Text"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Expression( "Expression" ) )
__children["BoxOverlay"]["Expression"]["__in"].addChild( Gaffer.Color3fPlug( "p0", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression"]["__in"].addChild( GafferML.TensorPlug( "p1", defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression"]["__out"].addChild( Gaffer.Color4fPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression"]["__out"].addChild( Gaffer.StringPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 'Hello World', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Expression( "Expression8" ) )
__children["BoxOverlay"]["Expression8"]["__in"].addChild( Gaffer.Box2fPlug( "p0", defaultValue = imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 100, 100 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression8"]["__in"].addChild( Gaffer.IntPlug( "p1", defaultValue = 50, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression8"]["__out"].addChild( Gaffer.Box2iPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Box2i(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"]["Expression8"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( GafferImage.Crop( "Crop" ) )
__children["BoxOverlay"]["Crop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Dot( "Dot" ) )
__children["BoxOverlay"]["Dot"].setup( GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["BoxOverlay"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Dot( "Dot1" ) )
__children["BoxOverlay"]["Dot1"].setup( GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["BoxOverlay"]["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Dot( "Dot2" ) )
__children["BoxOverlay"]["Dot2"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOverlay"]["Dot2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.IntPlug( "size_x", defaultValue = 50, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.IntPlug( "seed", defaultValue = 0, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.Random( "Random" ) )
__children["BoxOverlay"]["Random"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.FloatPlug( "lineWidth", defaultValue = 4.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.V2fPlug( "shadowOffset", defaultValue = imath.V2f( 5, -5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOverlay"].addChild( Gaffer.FloatPlug( "shadowBlur", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"] = Gaffer.Box( "FilterBoxes" )
parent.addChild( __children["FilterBoxes"] )
__children["FilterBoxes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["FilterBoxes"]["BoxIn1"].setup( GafferML.TensorPlug( "out", defaultValue = GafferML.Tensor(), ) )
__children["FilterBoxes"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"].addChild( GafferML.TensorPlug( "boxes_in", defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"].addChild( Gaffer.BoxOut( "boxes2" ) )
__children["FilterBoxes"]["boxes2"].setup( GafferML.TensorPlug( "in", defaultValue = GafferML.Tensor(), ) )
__children["FilterBoxes"]["boxes2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"].addChild( GafferML.TensorPlug( "boxes_out", direction = Gaffer.Plug.Direction.Out, defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"].addChild( Gaffer.Expression( "Expression" ) )
__children["FilterBoxes"]["Expression"]["__in"].addChild( GafferML.TensorPlug( "p0", defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"]["Expression"]["__in"].addChild( Gaffer.FloatPlug( "p1", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"]["Expression"]["__out"].addChild( GafferML.TensorPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = GafferML.Tensor(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"]["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FilterBoxes"].addChild( Gaffer.FloatPlug( "box_threshold", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["image"] = GafferImage.ImagePlug( "image", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["image"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["box_threshold"] = Gaffer.FloatPlug( "box_threshold", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["box_threshold"] )
__children["BoxIn1"] = Gaffer.BoxIn( "BoxIn1" )
parent.addChild( __children["BoxIn1"] )
__children["BoxIn1"].setup( Gaffer.IntPlug( "out", defaultValue = 50, minValue = 0, ) )
__children["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["size"] = Gaffer.IntPlug( "size", defaultValue = 50, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["size"] )
__children["seed"] = Gaffer.IntPlug( "seed", defaultValue = 0, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["seed"] )
__children["lineWidth"] = Gaffer.FloatPlug( "lineWidth", defaultValue = 4.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["lineWidth"] )
__children["shadowOffset"] = Gaffer.V2fPlug( "shadowOffset", defaultValue = imath.V2f( 5, -5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["shadowOffset"] )
__children["shadowBlur"] = Gaffer.FloatPlug( "shadowBlur", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["shadowBlur"] )
__children["Dot7"] = Gaffer.Dot( "Dot7" )
parent.addChild( __children["Dot7"] )
__children["Dot7"].setup( GafferImage.ImagePlug( "in", ) )
__children["Dot7"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot8"] = Gaffer.Dot( "Dot8" )
parent.addChild( __children["Dot8"] )
__children["Dot8"].setup( GafferImage.ImagePlug( "in", ) )
__children["Dot8"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["Crop"] = GafferImage.Crop( "Crop" )
parent.addChild( __children["Crop"] )
__children["Crop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageToTensor10"]["image"].setInput( __children["ColorSpace11"]["out"] )
__children["ImageToTensor10"]["channels"].setValue( IECore.StringVectorData( [ 'B', 'G', 'R' ] ) )
__children["ImageToTensor10"]["__uiPosition"].setValue( imath.V2f( -9.07890224, -3.63943863 ) )
__children["ColorSpace11"]["in"].setInput( __children["Crop"]["out"] )
__children["ColorSpace11"]["outputSpace"].setValue( 'sRGB - Texture' )
__children["ColorSpace11"]["__uiPosition"].setValue( imath.V2f( -9.07890224, 6.52462387 ) )
__children["Resize21"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Resize21"]["format"]["displayWindow"]["min"].setValue( imath.V2i( 0, 0 ) )
__children["Resize21"]["format"]["displayWindow"]["max"]["x"].setValue( 640 )
Gaffer.Metadata.registerValue( __children["Resize21"]["format"], 'formatPlugValueWidget:mode', 'custom' )
__children["Resize21"]["format"]["displayWindow"]["max"]["y"].setInput( __children["Resize21"]["format"]["displayWindow"]["max"]["x"] )
__children["Resize21"]["fitMode"].setValue( 4 )
__children["Resize21"]["__uiPosition"].setValue( imath.V2f( -9.07890224, 19.1886883 ) )
__children["Inference16"]["model"].setValue( '/home/lucienf/Downloads/yolov7-tiny-dynamic-batch.onnx' )
__children["Inference16"]["in"][0].setInput( __children["ImageToTensor10"]["tensor"] )
Gaffer.Metadata.registerValue( __children["Inference16"]["in"][0], 'label', 'images' )
Gaffer.Metadata.registerValue( __children["Inference16"]["in"][0], 'noduleLayout:label', 'images' )
Gaffer.Metadata.registerValue( __children["Inference16"]["out"][0], 'label', 'output' )
Gaffer.Metadata.registerValue( __children["Inference16"]["out"][0], 'noduleLayout:label', 'output' )
__children["Inference16"]["__uiPosition"].setValue( imath.V2f( -9.07890224, -9.30350113 ) )
__children["BoxOverlay"]["__uiPosition"].setValue( imath.V2f( 6.75174427, -32.2995911 ) )
__children["BoxOverlay"]["BoxIn"]["name"].setValue( 'img' )
__children["BoxOverlay"]["BoxIn"]["__in"].setInput( __children["BoxOverlay"]["img"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn"]["__in"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxOverlay"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( -41.9379921, 5.50000191 ) )
__children["BoxOverlay"]["img"].setInput( __children["Dot7"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["img"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["img"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["img"], 'noduleLayout:section', 'top' )
__children["BoxOverlay"]["BoxIn1"]["name"].setValue( 'tensor' )
__children["BoxOverlay"]["BoxIn1"]["__in"].setInput( __children["BoxOverlay"]["tensor"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn1"]["__in"], 'label', 'output' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn1"]["__in"], 'noduleLayout:label', 'output' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn1"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxOverlay"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( -33.8145027, 5.50000191 ) )
__children["BoxOverlay"]["tensor"].setInput( __children["FilterBoxes"]["boxes_out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["tensor"], 'label', 'output' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["tensor"], 'noduleLayout:label', 'output' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["tensor"], 'noduleLayout:section', 'top' )
__children["BoxOverlay"]["BoxIn2"]["name"].setValue( 'bg' )
__children["BoxOverlay"]["BoxIn2"]["__in"].setInput( __children["BoxOverlay"]["bg"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn2"]["__in"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn2"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxIn2"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxOverlay"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -25.3474998, 5.50000191 ) )
__children["BoxOverlay"]["bg"].setInput( __children["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["bg"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["bg"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["bg"], 'noduleLayout:section', 'top' )
__children["BoxOverlay"]["Rectangle"]["in"].setInput( __children["BoxOverlay"]["DeleteChannels"]["out"] )
__children["BoxOverlay"]["Rectangle"]["color"].setInput( __children["BoxOverlay"]["Expression7"]["__out"]["p1"] )
__children["BoxOverlay"]["Rectangle"]["area"].setInput( __children["BoxOverlay"]["Expression7"]["__out"]["p0"] )
__children["BoxOverlay"]["Rectangle"]["lineWidth"].setInput( __children["BoxOverlay"]["lineWidth"] )
__children["BoxOverlay"]["Rectangle"]["__uiPosition"].setValue( imath.V2f( 25.3707027, -11.4630051 ) )
__children["BoxOverlay"]["Loop"]["in"].setInput( __children["BoxOverlay"]["DeleteChannels"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Loop"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Loop"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxOverlay"]["Loop"]["next"].setInput( __children["BoxOverlay"]["Merge"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Loop"]["next"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Loop"]["previous"], 'noduleLayout:section', 'bottom' )
__children["BoxOverlay"]["Loop"]["iterations"].setInput( __children["BoxOverlay"]["Expression6"]["__out"]["p0"] )
__children["BoxOverlay"]["Loop"]["__uiPosition"].setValue( imath.V2f( -1.11998177, -39.1192551 ) )
__children["BoxOverlay"]["Merge"]["in"][0].setInput( __children["BoxOverlay"]["Dot1"]["out"] )
__children["BoxOverlay"]["Merge"]["in"][1].setInput( __children["BoxOverlay"]["Crop"]["out"] )
__children["BoxOverlay"]["Merge"]["operation"].setValue( 8 )
__children["BoxOverlay"]["Merge"]["__uiPosition"].setValue( imath.V2f( 25.3707027, -30.9551926 ) )
__children["BoxOverlay"]["Expression6"]["__in"]["p0"].setInput( __children["BoxOverlay"]["tensor"] )
__children["BoxOverlay"]["Expression6"]["__uiPosition"].setValue( imath.V2f( -12.83708, -38.6043892 ) )
__children["BoxOverlay"]["Expression7"]["__in"]["p0"].setInput( __children["BoxOverlay"]["Random"]["outColor"] )
__children["BoxOverlay"]["Expression7"]["__in"]["p1"].setInput( __children["BoxOverlay"]["bg"]["format"] )
__children["BoxOverlay"]["Expression7"]["__in"]["p2"].setInput( __children["BoxOverlay"]["img"]["format"] )
__children["BoxOverlay"]["Expression7"]["__in"]["p3"].setInput( __children["BoxOverlay"]["tensor"] )
__children["BoxOverlay"]["Expression7"]["__uiPosition"].setValue( imath.V2f( 9.94820881, -9.91075325 ) )
__children["BoxOverlay"]["Merge1"]["in"][0].setInput( __children["BoxOverlay"]["Dot2"]["out"] )
__children["BoxOverlay"]["Merge1"]["in"][1].setInput( __children["BoxOverlay"]["Loop"]["out"] )
__children["BoxOverlay"]["Merge1"]["operation"].setValue( 8 )
__children["BoxOverlay"]["Merge1"]["__uiPosition"].setValue( imath.V2f( -2.61998177, -47.2833176 ) )
__children["BoxOverlay"]["DeleteChannels"]["in"].setInput( __children["BoxOverlay"]["BoxIn2"]["out"] )
__children["BoxOverlay"]["DeleteChannels"]["channels"].setValue( '*' )
__children["BoxOverlay"]["DeleteChannels"]["__uiPosition"].setValue( imath.V2f( -2.61998177, -2.83202934 ) )
__children["BoxOverlay"]["BoxOut"]["in"].setInput( __children["BoxOverlay"]["Merge1"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOverlay"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -1.11930418, -55.6153488 ) )
__children["BoxOverlay"]["out"].setInput( __children["BoxOverlay"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOverlay"]["Text"]["in"].setInput( __children["BoxOverlay"]["Rectangle"]["out"] )
__children["BoxOverlay"]["Text"]["color"].setInput( __children["BoxOverlay"]["Expression"]["__out"]["p0"] )
__children["BoxOverlay"]["Text"]["shadow"].setValue( True )
__children["BoxOverlay"]["Text"]["shadowOffset"].setInput( __children["BoxOverlay"]["shadowOffset"] )
__children["BoxOverlay"]["Text"]["shadowBlur"].setInput( __children["BoxOverlay"]["shadowBlur"] )
__children["BoxOverlay"]["Text"]["text"].setInput( __children["BoxOverlay"]["Expression"]["__out"]["p1"] )
__children["BoxOverlay"]["Text"]["size"]["x"].setInput( __children["BoxOverlay"]["size_x"] )
__children["BoxOverlay"]["Text"]["size"]["y"].setInput( __children["BoxOverlay"]["Text"]["size"]["x"] )
__children["BoxOverlay"]["Text"]["area"].setInput( __children["BoxOverlay"]["Expression8"]["__out"]["p0"] )
__children["BoxOverlay"]["Text"]["__uiPosition"].setValue( imath.V2f( 25.3707027, -17.1270676 ) )
__children["BoxOverlay"]["Expression"]["__in"]["p0"].setInput( __children["BoxOverlay"]["Random"]["outColor"] )
__children["BoxOverlay"]["Expression"]["__in"]["p1"].setInput( __children["BoxOverlay"]["tensor"] )
__children["BoxOverlay"]["Expression"]["__uiPosition"].setValue( imath.V2f( 14.6633167, -17.7545452 ) )
__children["BoxOverlay"]["Expression8"]["__in"]["p0"].setInput( __children["BoxOverlay"]["Rectangle"]["area"] )
__children["BoxOverlay"]["Expression8"]["__in"]["p1"].setInput( __children["BoxOverlay"]["Text"]["size"]["y"] )
__children["BoxOverlay"]["Expression8"]["__uiPosition"].setValue( imath.V2f( 12.18116, -15.1803007 ) )
__children["BoxOverlay"]["Crop"]["in"].setInput( __children["BoxOverlay"]["Text"]["out"] )
__children["BoxOverlay"]["Crop"]["areaSource"].setValue( 2 )
__children["BoxOverlay"]["Crop"]["area"].setValue( imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( 720, 720 ) ) )
__children["BoxOverlay"]["Crop"]["__uiPosition"].setValue( imath.V2f( 25.3707027, -22.7911301 ) )
__children["BoxOverlay"]["Dot"]["in"].setInput( __children["BoxOverlay"]["Loop"]["previous"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Dot"]["in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Dot"]["out"], 'noduleLayout:section', 'top' )
__children["BoxOverlay"]["Dot"]["__uiPosition"].setValue( imath.V2f( 13.6707001, -43.2576714 ) )
__children["BoxOverlay"]["Dot1"]["in"].setInput( __children["BoxOverlay"]["Dot"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Dot1"]["in"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Dot1"]["out"], 'noduleLayout:section', 'top' )
__children["BoxOverlay"]["Dot1"]["__uiPosition"].setValue( imath.V2f( 13.6707001, -30.0235405 ) )
__children["BoxOverlay"]["Dot2"]["in"].setInput( __children["BoxOverlay"]["BoxIn2"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Dot2"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["Dot2"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxOverlay"]["Dot2"]["__uiPosition"].setValue( imath.V2f( -25.3474998, -39.9512863 ) )
__children["BoxOverlay"]["size_x"].setInput( __children["BoxIn1"]["out"] )
__children["BoxOverlay"]["seed"].setInput( __children["seed"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["seed"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["seed"], 'description', 'Seed for the random number generator. Different seeds\nproduce different random numbers. When controlling two\ndifferent properties using the same context variable,\ndifferent seeds may be used to ensure that the generated\nvalues are different.' )
__children["BoxOverlay"]["Random"]["seedVariable"].setValue( 'loop:index' )
__children["BoxOverlay"]["Random"]["baseColor"].setValue( imath.Color3f( 1, 0.113772422, 0 ) )
__children["BoxOverlay"]["Random"]["hue"].setValue( 1.0 )
__children["BoxOverlay"]["Random"]["__uiPosition"].setValue( imath.V2f( 6.36624146, -16.9701042 ) )
__children["BoxOverlay"]["lineWidth"].setInput( __children["lineWidth"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["lineWidth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["lineWidth"], 'description', 'The width of the outline, measured in pixels.' )
__children["BoxOverlay"]["shadowOffset"].setInput( __children["shadowOffset"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["shadowOffset"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["shadowOffset"], 'description', 'The offset of the shadow, measured in pixels.' )
__children["BoxOverlay"]["shadowBlur"].setInput( __children["shadowBlur"] )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["shadowBlur"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxOverlay"]["shadowBlur"], 'description', 'A blur applied to the shadow, measured in pixels.' )
__children["FilterBoxes"]["__uiPosition"].setValue( imath.V2f( -7.57890224, -17.6355324 ) )
__children["FilterBoxes"]["BoxIn1"]["name"].setValue( 'boxes_in' )
__children["FilterBoxes"]["BoxIn1"]["__in"].setInput( __children["FilterBoxes"]["boxes_in"] )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["BoxIn1"]["__in"], 'label', 'boxes' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["BoxIn1"]["__in"], 'noduleLayout:label', 'boxes' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["BoxIn1"]["out"], 'noduleLayout:section', 'bottom' )
__children["FilterBoxes"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 9.56174755, 2.60000014 ) )
__children["FilterBoxes"]["boxes_in"].setInput( __children["Inference16"]["out"][0] )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes_in"], 'label', 'boxes' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes_in"], 'noduleLayout:label', 'boxes' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes_in"], 'noduleLayout:section', 'top' )
__children["FilterBoxes"]["boxes2"]["name"].setValue( 'boxes_out' )
__children["FilterBoxes"]["boxes2"]["in"].setInput( __children["FilterBoxes"]["Expression"]["__out"]["p0"] )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes2"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes2"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes2"]["__out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes2"]["passThrough"], 'noduleLayout:section', 'top' )
__children["FilterBoxes"]["boxes2"]["__uiPosition"].setValue( imath.V2f( 10.6999998, -10.8500004 ) )
__children["FilterBoxes"]["boxes_out"].setInput( __children["FilterBoxes"]["boxes2"]["__out"] )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes_out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["boxes_out"], 'noduleLayout:section', 'bottom' )
__children["FilterBoxes"]["Expression"]["__in"]["p0"].setInput( __children["FilterBoxes"]["BoxIn1"]["out"] )
__children["FilterBoxes"]["Expression"]["__in"]["p1"].setInput( __children["FilterBoxes"]["box_threshold"] )
__children["FilterBoxes"]["Expression"]["__uiPosition"].setValue( imath.V2f( 9.30000019, -4.64999914 ) )
__children["FilterBoxes"]["box_threshold"].setInput( __children["box_threshold"] )
Gaffer.Metadata.registerValue( __children["FilterBoxes"]["box_threshold"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["image"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["image"], 'description', 'image to detect classes from' )
Gaffer.Metadata.registerValue( __children["image"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["image"], 'layout:index', 0 )
__children["BoxIn"]["name"].setValue( 'image' )
__children["BoxIn"]["__in"].setInput( __children["image"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 6.94612122, 31.5207195 ) )
Gaffer.Metadata.registerValue( __children["box_threshold"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["box_threshold"], 'description', 'min confidence value to filter detections' )
Gaffer.Metadata.registerValue( __children["box_threshold"], 'layout:section', 'Settings.detection' )
Gaffer.Metadata.registerValue( __children["box_threshold"], 'layout:index', 2 )
__children["BoxIn1"]["name"].setValue( 'size' )
__children["BoxIn1"]["__in"].setInput( __children["size"] )
__children["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 14.2995567, -17.6992321 ) )
Gaffer.Metadata.registerValue( __children["size"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["size"], 'description', 'text size' )
Gaffer.Metadata.registerValue( __children["size"], 'layout:section', 'Settings.Overlay.text' )
Gaffer.Metadata.registerValue( __children["size"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["seed"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["seed"], 'description', 'Seed for the random number generator. Different seeds\nproduce different random numbers. When controlling two\ndifferent properties using the same context variable,\ndifferent seeds may be used to ensure that the generated\nvalues are different.' )
Gaffer.Metadata.registerValue( __children["seed"], 'layout:section', 'Settings.Overlay' )
Gaffer.Metadata.registerValue( __children["seed"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'description', 'The width of the outline, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'layout:section', 'Settings.Overlay.box' )
Gaffer.Metadata.registerValue( __children["lineWidth"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["shadowOffset"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["shadowOffset"], 'description', 'The offset of the shadow, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["shadowOffset"], 'layout:section', 'Settings.Overlay.text' )
Gaffer.Metadata.registerValue( __children["shadowOffset"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["shadowBlur"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["shadowBlur"], 'description', 'A blur applied to the shadow, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["shadowBlur"], 'layout:section', 'Settings.Overlay.text' )
Gaffer.Metadata.registerValue( __children["shadowBlur"], 'layout:index', 6 )
__children["Dot7"]["in"].setInput( __children["Dot8"]["out"] )
__children["Dot7"]["__uiPosition"].setValue( imath.V2f( -24.5717468, -24.7995911 ) )
__children["Dot8"]["in"].setInput( __children["ColorSpace11"]["out"] )
__children["Dot8"]["__uiPosition"].setValue( imath.V2f( -24.5717468, -0.807407498 ) )
__children["BoxOut"]["in"].setInput( __children["BoxOverlay"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 6.75101662, -40.7995911 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 1 )
__children["Crop"]["in"].setInput( __children["Resize21"]["out"] )
__children["Crop"]["areaSource"].setValue( 2 )
__children["Crop"]["area"].setValue( imath.Box2i( imath.V2i( 0, 0 ), imath.V2i( 640, 640 ) ) )
__children["Crop"]["__uiPosition"].setValue( imath.V2f( -9.07890224, 12.1886864 ) )
__children["BoxOverlay"]["Expression6"]["__engine"].setValue( 'python' )
__children["BoxOverlay"]["Expression6"]["__expression"].setValue( 'tensor = parent["__in"]["p0"]\ntensorData = tensor.asData()\nnumDetection = len(tensorData) / tensor.shape()[1] # bs, minx, miny, maxx, maxy, cls, conf\nparent["__out"]["p0"] = numDetection' )
__children["BoxOverlay"]["Expression7"]["__engine"].setValue( 'python' )
__children["BoxOverlay"]["Expression7"]["__expression"].setValue( 'import imath\ntensor = parent["__in"]["p3"]\ntensorData = tensor.asData()\ntensorShape = tensor.shape()\nloopIndex = context.get("loop:index", 0 )\n\nbs, x0, y0, x1, y1, cls, conf = tensorData[loopIndex*tensorShape[1]:( loopIndex +1 ) * tensorShape[1] ]\n\n# inference format\nformat = parent["__in"]["p2"]\nwidth = format.width()\nheight = format.height()\n\n# overlay format\nbgFormat = parent["__in"]["p1"]\nbgWidth = bgFormat.width()\nbgHeight = bgFormat.height()\n\n# flip\ny0 = height - y0\ny1 = height - y1\n\nx0 = x0 / width * bgWidth\ny0 = y0 / height * bgHeight\nx1 = x1 / width * bgWidth\ny1 = y1 / height * bgHeight\n\n\nparent["__out"]["p0"] = imath.Box2f( imath.V2f( x0, y0), imath.V2f( x1, y1  ) )\nrc = parent["__in"]["p0"]\ncolor = imath.Color4f(rc.r, rc.g, rc.b, 1)\nparent["__out"]["p1"] = color' )
__children["BoxOverlay"]["Expression"]["__engine"].setValue( 'python' )
__children["BoxOverlay"]["Expression"]["__expression"].setValue( '\nyolo_classnames = [\'person\', \'bicycle\', \'car\', \'motorcycle\', \'airplane\', \'bus\', \'train\', \'truck\', \'boat\', \'traffic light\',\n         \'fire hydrant\', \'stop sign\', \'parking meter\', \'bench\', \'bird\', \'cat\', \'dog\', \'horse\', \'sheep\', \'cow\',\n         \'elephant\', \'bear\', \'zebra\', \'giraffe\', \'backpack\', \'umbrella\', \'handbag\', \'tie\', \'suitcase\', \'frisbee\',\n         \'skis\', \'snowboard\', \'sports ball\', \'kite\', \'baseball bat\', \'baseball glove\', \'skateboard\', \'surfboard\',\n         \'tennis racket\', \'bottle\', \'wine glass\', \'cup\', \'fork\', \'knife\', \'spoon\', \'bowl\', \'banana\', \'apple\',\n         \'sandwich\', \'orange\', \'broccoli\', \'carrot\', \'hot dog\', \'pizza\', \'donut\', \'cake\', \'chair\', \'couch\',\n         \'potted plant\', \'bed\', \'dining table\', \'toilet\', \'tv\', \'laptop\', \'mouse\', \'remote\', \'keyboard\', \'cell phone\',\n         \'microwave\', \'oven\', \'toaster\', \'sink\', \'refrigerator\', \'book\', \'clock\', \'vase\', \'scissors\', \'teddy bear\',\n         \'hair drier\', \'toothbrush\']\n\ntensor = parent["__in"]["p1"]\ntensorShape = tensor.shape()\ntensorData = tensor.asData()\n\nloopIndex = context.get("loop:index", 0 )\n\nbs, x0, y0, x1, y1, cls, conf = tensorData[loopIndex*tensorShape[1]:( loopIndex +1 ) * tensorShape[1] ]\nclassName = yolo_classnames[int(cls)]\n\nparent["__out"]["p1"] = f"{className} : {conf:2f}"\nrc = parent["__in"]["p0"]\ncolor = imath.Color4f(rc.r, rc.g, rc.b, 1)\nparent["__out"]["p0"] = color' )
__children["BoxOverlay"]["Expression8"]["__engine"].setValue( 'python' )
__children["BoxOverlay"]["Expression8"]["__expression"].setValue( 'rectArea  = parent["__in"]["p0"]\n\nx0 = rectArea.min().x\nx1 = rectArea.max().x\ny0 = rectArea.min().y\ny1 = rectArea.max().y\n\nparent["__out"]["p0"] = imath.Box2i( imath.V2i(x0, y0), imath.V2i(x1, y0 + parent["__in"]["p1"] * 1.5) )\n' )
__children["FilterBoxes"]["Expression"]["__engine"].setValue( 'python' )
__children["FilterBoxes"]["Expression"]["__expression"].setValue( 'import GafferML\n\n# inputs\nbox_threshold = parent["__in"]["p1"]\n\nboxes = parent["__in"]["p0"].asData()\nboxesShape = parent["__in"]["p0"].shape()\nboxShape = boxesShape[1]\n\nfilteredBoxes = []\nfilteredShape = [boxShape]\n\nfor predNum in range( boxesShape[0] ):\n\tcurrentBox = boxes[predNum*boxShape:predNum*boxShape + boxShape]\n\tif currentBox[-1] > box_threshold:\n\t\tfilteredBoxes.append(currentBox)\n\t\t\nfilteredShape.insert(0, len(filteredBoxes))\nfilteredBoxesData = IECore.FloatVectorData([ item for box in filteredBoxes for item in box ])\n\nparent["__out"]["p0"] = GafferML.Tensor(filteredBoxesData, filteredShape)' )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )


del __children
